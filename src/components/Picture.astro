---
import { getImage } from "astro:assets";

import type { ImageMetadata } from "astro";

interface Props {
  src: ImageMetadata;
  alt: string;
  desktopSrc?: ImageMetadata;
  caption?: string;
  class?: string;
  contentWarning?: boolean;
  [props: string]: unknown;
}

const {
  src,
  alt,
  desktopSrc,
  caption,
  contentWarning = false,
  warningCaption = "可能含有令人不适的内容<br />点击或轻触去除模糊",
  class: className,
  ...props
} = Astro.props;

const targetFormats = ["avif", "webp"];

const imageSources = await Promise.all([
  ...(desktopSrc
    ? targetFormats
        .map(
          async (format) =>
            await getImage({
              ...props,
              src: desktopSrc,
              format,
              media: "(min-width: 600px)",
            }),
        )
        .concat(
          getImage({
            ...props,
            src: desktopSrc,
            format: desktopSrc.format,
            media: "(min-width: 600px)",
          }), // 桌面端默认图片
        )
    : []),
  ...targetFormats.map(
    async (format) => await getImage({ ...props, src, format }),
  ),
]);
---

<div class:list={["picture-container", contentWarning && "content-warning"]}>
  {contentWarning && <p>{warningCaption}</p>}

  <picture>
    {
      imageSources.map((image) => (
        <source
          {...image.attributes}
          srcset={image.src}
          type={"image/" + image.options.format}
          media={image.attributes.media}
        />
      ))
    }
    <img
      src={src.src}
      alt={alt}
      loading="lazy"
      class:list={["img-thumbnail thumb", className]}
      {...props}
    />
  </picture>

  <slot name="caption">
    {
      caption && (
        <>
          <br />
          <small>{caption}</small>
        </>
      )
    }
  </slot>
</div>

<style is:global>
  .picture-container {
    position: relative;
    width: 100%;
  }
  .picture-container > p {
    display: var(--warning, flex);
    position: absolute;
    inset: 0;
    color: white;
    z-index: 1;
    font-size: 0.9rem;
    justify-content: center;
    align-items: center;
    pointer-events: none;
  }
  .content-warning img {
    transition: 0.5s;
    filter: var(--filter, blur(20px) brightness(0.8));
  }
</style>

<script>
  document
    .querySelectorAll(".picture-container")
    .forEach(function (contentWarningText) {
      contentWarningText.addEventListener(
        "click",
        function (this: HTMLImageElement) {
          this.style.setProperty("--filter", "none");
          this.style.setProperty("--warning", "none");
        },
      );
    });
</script>
